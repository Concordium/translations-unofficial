.. _contract-module-ko:

==========================
스마트 계약 모듈입니다.
==========================

스마트 계약은 *스마트 계약 모듈* 의 체인에 배포됩니다.

.. note::

   스마트 계약 모듈을 흔히 *모듈* 이라고 합니다.

모듈은 하나 이상의 스마트 계약을 포함 할 수 있으므로 계약간에 코드를 공유 할 수 있으며 선택적으로 다음을 포함 할 수 있습니다. :ref:`스키마를 계약합니다 <contract-schema-ko>`

.. graphviz::
   :align: center
   :caption: A smart contract module containing two smart contracts.

   digraph G {
       subgraph cluster_0 {
           node [fillcolor=white, shape=note]
           label = "Module";
           "Crowdfunding";
           "Escrow";
       }
   }

모듈은 자체 포함되어야하며 체인과의 상호 작용을 허용하는 제한된 가져 오기 목록 만 있어야합니다.
이 호스트 환경에서 제공하고 ``concordium`` 라는 이름의 모듈을 가져 스마트 계약 사용할 수 있습니다.

.. seealso::

   전체 참조는 :ref:`host-functions` 를 확인하세요.

온 체인 언어
=================

Concordium 블록 체인에서 스마트 계약 언어는 이식 가능한 컴파일 대상이되고 샌드 박스 환경에서 실행되도록 설계된 `Web Assembly`_ (간략히 말해서 Wasm)의 하위 집합입니다.
이는 스마트 계약이 반드시 코드를 신뢰하지 않는 네트워크의 제빵사에 의해 실행되기 때문에 유용합니다.

Wasm은 저수준 언어이며 손으로 쓰는 것은 비현실적입니다.
대신 더 높은 수준의 언어로 스마트 계약을 작성한 다음 Wasm으로 컴파일 할 수 있습니다.

.. _wasm-limitations-ko:

한계
-----------

.. todo::

   이러한 시작 부분과 같은 다른 제한을 추가 ...

블록 체인 환경은 각 노드가 정확히 동일한 양의 리소스를 사용하여 정확히 동일한 방식으로 계약을 실행할 수 있어야한다는 점에서 매우 특별합니다.
그렇지 않으면 노드가 체인 상태에 대한 합의에 도달하지 못합니다.
이러한 이유로 스마트 계약은 Wasm의 제한된 하위 집합으로 작성되어야합니다.

부동 소수점 숫자
^^^^^^^^^^^^^^^^^^^^^^

Wasm은 부동 소수점 숫자를 지원하지만 스마트 계약에서는이를 사용할 수 없습니다.
그 이유는 Wasm 부동 소수점 숫자가 특수한 ``NaN`` ("숫자가 아님") 값을 가질 수 있기 때문에 처리하면 비결 정성을 초래할 수 있습니다.

제한은 정적으로 적용됩니다. 즉, 스마트 계약은 부동 소수점 유형을 포함 할 수 없으며 부동 소수점 값을 포함하는 명령을 포함 할 수 없습니다.


전개
==========

모듈을 체인에 배포한다는 것은 모듈 바이트 코드를 Concordium 네트워크에 트랜잭션으로 제출하는 것을 의미합니다.
*valid* 인 경우 이 트랜잭션은 블록에 포함됩니다.
이 트랜잭션은 다른 모든 트랜잭션과 마찬가지로 관련 비용을 가집니다.
비용은 바이트 코드의 크기를 기준으로 하며 모듈의 유효성 확인과 온체인 스토리지에 대해 모두 청구됩니다.

배포 자체는 스마트 계약을 실행하지 않습니다.
실행하려면 먼저 계약의 *인스턴스* 를 생성해야 합니다.

.. seealso::

   자세한 내용은 :ref:`contract-instances-ko` 를 참조하십시오.

.. _smart-contracts-on-chain-ko:

.. _smart-contracts-on-the-chain-ko:

.. _contract-on-chain-ko:

.. _contract-on-the-chain-ko:

체인상의 스마트 계약
===========================

체인의 스마트 계약은 배포된 모듈에서 내보낸 기능의 모음입니다.
이를 위해 사용되는 구체적인 메커니즘은 `Web Assembly`_ export 섹션입니다.
스마트 계약은 새 인스턴스를 초기화하기 위해 하나의 함수를 내 보내야하며 인스턴스 업데이트를 위해 0 개 이상의 함수를 내보낼 수 있습니다.

스마트 계약 모듈은 여러 개의 서로 다른 스마트 계약에 대한 기능을 내보낼 수 있으므로 다음과 같은 이름 지정 체계를 사용하여 기능을 연결합니다:

- ``init_<contract-name>``: 스마트 계약을 초기화하는 기능은 ``init_`` 로 시작하고 그 뒤에 스마트 계약의 이름이 와야합니다.
  계약은 ASCII 영숫자 또는 구두점 문자로만 구성되어야하며 ``.`` 기호를 포함 할 수 없습니다.

- ``<contract-name>.<receive-function-name>``: 스마트 계약과 상호 작용하는 함수에는 계약 이름이 접두사로 붙고 그 뒤에 ``.`` 및 함수 이름이 붙습니다.
  init 함수와 마찬가지로 계약 이름에``.`` 기호를 포함 할 수 없습니다.

.. note::

   Rust 및 ``concordium-std`` 를 사용하여 스마트 계약을 개발하는 경우 절차 매크로``#[init(...)]`` 및 ``#[receive(...)]`` 가 올바른 설정을합니다. 명명 체계.

.. _Web Assembly: https://webassembly.org/
