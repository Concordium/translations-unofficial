.. _contract-module:

======================
Модули смарт-контрактов
======================

Смарт-контракты развертываются в сети в *модулях смарт-контрактов*.

.. примечание:

   Модуль смарт-контракта часто называют просто *модуль*.

Модуль может содержать один или несколько смарт-контрактов, позволяющих
совместно использовать код между контрактами, и может дополнительно 
содержать:ref:`contract schemas <contract-schema>`.

.. graphviz::
   :align: center
   :caption: A smart contract module containing two smart contracts.

   digraph G {
       subgraph cluster_0 {
           node [fillcolor=white, shape=note]
           label = "Module";
           "Crowdfunding";
           "Escrow";
       }
   }

Модуль должен быть автономным и иметь только ограниченный список импорта,
который позволяет взаимодействовать с сетью.
Это предоставляется средой и доступно для смарт-контракта путем импорта
модуля с именем ``concordium``.

.. seealso::

   Check out :ref:`host-functions` for a complete reference.

On-chain язык смарт-контрактов
=================

В блокчейне Concordium язык смарт-контрактов представляет собой подмножество `Web
Assembly`_ (сокращенно Wasm), которая предназначена для переносимой компиляции
и для запуска в изолированной среде. Это полезно, потому что смарт-контракты будут
выполняться бейкерами в сети, которые не обязательно доверяют коду.

Wasm - это язык низкого уровня, поэтому писать на нём непрактично. Вместо этого,
можно писать смарт-контракты на языке более высокого уровня, который затем
компилируется в Wasm.

.. _wasm-limitations:

Ограничения
-----------

.. todo::

   Add other limitations, such as start sections...

Среда блокчейна очень специфична в том смысле, что каждый узел должен иметь возможность
выполнять контракт точно таким же образом, используя точно такое же количество ресурсов.
В противном случае узлы не смогли бы достичь консенсуса по состоянию сети.
По этой причине смарт-контракты должны быть написаны в ограниченном подмножестве Wasm.

Числа с плавающей запятой
^^^^^^^^^^^^^^^^^^^^^^

Хотя в Wasm есть поддержка чисел с плавающей запятой, смарт-контракты не могут их
использовать. Причина этого в том, что числа с плавающей запятой Wasm могут иметь
особое ``NaN``("не число") значение, обработка которого может привести к недетерминизму.

Ограничение применяется статически, что означает, что смарт-контракты не могут содержать
типы с плавающей запятой и не могут содержать никаких инструкций, которые включают значения
с плавающей запятой.


Развертывание
==========

Развертывание модуля в сети означает отправку байт-кода модуля в виде транзакции в сеть
Concordium. Если транзакция *корректна*, она будет включена в блок. Эта транзакция,
как и любая другая транзакция, имеет соответствующую стоимость. Стоимость зависит от размера
байт-кода и взимается как за проверку достоверности модуля, так и за хранение в сети.

Само развертывание смарт-контракт не выполняет.
Для запуска смарт-контракта пользователь сначала должен создать *экземпляр* контракта.

.. seealso::

   See :ref:`contract-instances` for more information.

.. _smart-contracts-on-chain:

.. _smart-contracts-on-the-chain:

.. _contract-on-chain:

.. _contract-on-the-chain:

Смарт-контракт в сети
===========================

Смарт-контракт в сети - это набор функций, экспортированных из развернутого модуля.
Конкретным механизмом для этого, является раздел экспорта `Web Assembly`_.
Смарт-контракт должен экспортировать одну функцию для инициализации новых экземпляров и 
может экспортировать ноль или более функций для обновления экземпляра.

Поскольку модуль смарт-контракта может экспортировать функции для нескольких разных 
смарт-контрактов, мы связываем функции, используя схему именования:

- ``init_<contract-name>``: Функция для инициализации смарт-контракта должна начинаться
  с ``init_`` далее имя смарт-контракта. Контракт должен состоять только из буквенно-цифровых
  символов ASCII или знаков препинания и не может содержать ``.`` символ.

- ``<contract-name>.<receive-function-name>``: Функции для взаимодействия со смарт-контрактом
  имеют префикс с именем контракта, за которым следует символ ``.`` и далее имя функции.
  Как и для функции init, имя контракта не может содержать ``.`` символ.

.. примечание:

   Если вы разрабатываете смарт-контракты с использованием Rust и ``concordium-std``, то
   процедурные макросы ``#[init(...)]`` и ``#[receive(...)]`` помогут настроить правильную
   схему именования.

.. _Web Assembly: https://webassembly.org/
