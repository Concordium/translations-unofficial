.. Should answer:
    - What is a smart contract
    - Why use a smart contract
    - What are the use cases
    - What are not the use cases

.. _introduction:

===============================
Введение в смарт-контракты
===============================

Смарт-контракт - это пользовательский фрагмент кода, отправляемый в блокчейн
Concordium, используемый для определенного поведения, которое не является
непосредственно частью основного протокола. Смарт-контракты выполняются узлами
в сети Concordium в соответствии с установленными правилами. Их выполнение
полностью прозрачно, и все узлы должны подтвердить результат выполнения,
который основан на общедоступной информации.

Смарт-контракт может получать, хранить и отправлять GTU, он может следить за
некоторыми аспектами цепочки и поддерживать свое состояние. Смарт-контракты
всегда выполняются в ответ на **внешние** действия, например, отправка сообщения.
На практике смарт-контракты часто представляют собой небольшую часть более
крупной системы, сочетающую в себе функциональность сети и вне ее. Примером
функциональности вне сети может быть сервер, который вызывает смарт-контракт на
основе данных из реального мира, таких как цены на акции или информация о погоде.

Для чего нужны смарт-контракты?
=============================

Смарт-контракты могут снизить необходимое количество доверия к третьим сторонам,
а в некоторых случаях устранить третью сторону. В других случаях, позволяют уменьшить
возможности третьей стороны, таким образом, уменьшая необходимое доверие к ним.

Поскольку смарт-контракты выполняются полностью прозрачно и могут быть проверены
любым, кто имеет доступ к узлу, они могут быть очень полезны для обеспечения
соглашения между сторонами.

.. _auction:

Пример смарт-контракта для аукциона
------------------------------

Примером использования смарт-контрактов может быть проведение аукциона; здесь мы
программируем смарт-контракт, чтобы он принимал разные ставки от кого угодно и
отслеживал самую высокую цену.
По окончании аукциона смарт-контракт отправляет продавцу GTU победившей ставки,
а все остальные ставки возвращает обратно. Затем продавец должен отправить товар
победителю.

Смарт-контракт заменяет главную роль организатора аукциона. Сам контракт регулирует
только часть торгов и распределение GTU в сети. Вероятно, также потребуется некоторая
логика для возмещения суммы, предложившей самую высокую цену, если продавец не
выполняет свои обязательства. Скорее всего, это будет означать, что контракт должен
поддерживать какое-то правило доказательства того, что продавец действительно выполнил
свое обязательство, или какой-либо способ подачи жалобы, предложившей самую высокую цену.
Смарт-контракты не могут решить эти реальные проблемы автоматически, и лучшее решение,
вероятно, будет зависеть от специфики аукциона.

Для чего смарт-контракты *не* предназначены?
===================================

Смарт-контракты - это очень захватывающая технология, и люди все еще находят новые
способы использовать их.
Однако в некоторых случаях смарт-контракты не являются хорошим решением.

Одним из ключевых преимуществ смарт-контрактов является доверие к выполнению кода,
и для этого большое количество узлов в блокчейн сети должно выполнять один и тот же
код и обеспечивать согласование результата. Естественно, это становится дорого по
сравнению с запуском того же кода на одном узле в какой-либо облачной службе.

В случаях, когда смарт-контракт зависит от тяжелых вычислений, можно было бы
вынести этот расчет из смарт-контракта и заставить смарт-контракт выполнять
только некоторые ключевые части вычислений, используя криптографические методы,
чтобы гарантировать правильное выполнение других частей.

Наконец, важно помнить, что смарт-контракты не имеют конфиденциальности, и **всё**,
к чему у смарт-контракта есть доступ, доступно всем остальным в сети Concordium,
а это означает, что трудно обрабатывать конфиденциальные данные в смарт-контракте.
В некоторых случаях можно использовать криптографические инструменты, чтобы не
работать с данными напрямую, а заставить смарт-контракты работать с производными
понятиями, такими как шифрование и обязательства, которые скрывают фактические данные.

Жизненный цикл смарт-контракта
==============================

Смарт-контракт сначала развертывается в цепочке как часть :ref:`contract
module <contract-module>`. После этого смарт-контракт может быть *инициализирован*
для получения :ref:`smart contract instance <contract-instances>`. Наконец, экземпляр
смарт-контракта можно многократно обновлять в соответствии с его собственной логикой.
