======================
Модули смарт-контракта
======================

Смарт-контракты развёртываются в цепочке в модули *смарт-контрактов*.

.. note::

   Модуль смарт-контракта часто упоминается просто как *модуль*.

Модуль может содержать один или более контрактов, предоставляя контрактам общий код, а также может дополнительно содержать
:ref:`схемы контракта <contract-schema>`.

.. graphviz::
   :align: center
   :caption: Модуль содержит два смарт-контракта.

   digraph G {
       subgraph cluster_0 {
           node [fillcolor=white, shape=note]
           label = "Module";
           "Crowdfunding";
           "Escrow";
       }
   }

Этот модуль должен быть самодостаточным и иметь только ограниченный список импорта, допустимый для взаимодействия с цепочкой.
Это обеспечивается средой хоста и доступно для смарт-контракта посредством импорта модуля с именем ``concordium``.

.. seealso::

   Смотрите :ref:`host-functions` для получения подробной информации.

Язык on-chain
=================

Язык смарт-контрактов для блокчейн Concordium представляет собой подмножество `Web
Assembly`_ (сокращённо Wasm) разработанный как портативная цель компиляции и запуска в среде-песочнице.
Это практично, так как смарт-контракты будут запускаться baker-ами в сети, которые необязательно доверяют коду.

Wasm – это низкоуровневый язык, и писать на нём вручную непрактично. Вместо этого можно писать смарт-контракты на более высокоуровневом языке, который затем компилируется в Wasm.

.. _wasm-limitations:

Ограничения
-----------

.. todo::

   Добавьте другие ограничения, как, например, начальные разделы...

Среда блокчейн весьма специфична в том плане, что все узлы должны иметь возможность выполнять контракт абсолютно одинаковым образом, используя абсолютно одинаковый набор ресурсов. В противном случае узлы терпели бы неудачу при достижении соглашения о состоянии цепочки. С этой целью смарт-контракты должны быть написаны в ограниченном подмножестве Wasm.

Числа с плавающей точкой
^^^^^^^^^^^^^^^^^^^^^^^^^

Несмотря на то, что Wasm поддерживает числа с плавающей запятой, смарт-контракт не допускает их использование. Причина заключается в том, что числа с плавающей запятой в Wasm могут принимать специфичное значение
``NaN`` ("not a number") обработка которого может привести к недетерминизму.

Ограничение накладывается статически, а это означает, что смарт-контракты не могут содержать ни типы с плавающей запятой, ни каких-либо инструкций, оперирующих числами с плавающей запятой.


Развёртывание
==============

Развёртывание модуля в цепочке означает передачу байткода модуля в качестве транзакции в сеть Concordium. Если транзакция достоверна, она будет добавлена в блок. Эта транзакция, как и любая другая транзакция, имеет соответствующую стоимость. Стоимость рассчитывается исходя из размера байткода и начисляется как за проверку достоверности модуля, так и за on-chain хранение.

Развёртывание само по себе не выполняет контракт. Для выполнения контракта пользователь для начала должен создать
*экземпляр* контракта.

.. seealso::

   Смотрите :ref:`contract-instances` для получения более подробной информации.

.. _smart-contracts-on-chain:

.. _smart-contracts-on-the-chain:

.. _contract-on-chain:

.. _contract-on-the-chain:

Смарт-контракт в цепочке
===========================

Смарт контракт в цепочке – это набор функций, экспортируемых из развёртываемого модуля. Конкретный механизм, используемый для этой цели, представляет собой секцию экспорта
`Web Assembly`_ . Смарт-контракт должен экспортировать одну функцию для инициализации новых экземпляров и может экспортировать ноль или более функций для обновления экземпляра.

Поскольку модуль смарт-контракта может экспортировать функции для множества различных смарт-контрактов, мы унифицируем функции, используя следующую схему именования:

- ``init_<contract-name>``: Функция инициализации смарт-контракта должна начинаться с ``init_`` за которым следует имя смарт-контракта. Имя контракта должно состоять из алфавитно-цифровых символов и символов пунктуации в кодировке ASCII, недопустимо использование символа ``.`` ("точка").

- ``<contract-name>.<receive-function-name>``: имя функции для взаимодействия со смарт-контрактом состоит из префикса с именем контракта, за которым следует ``.`` и имя самой функции. Как и для init-функции, в имени контракта не допускается символ ``.`` ("точка").

.. note::

   Если вы разрабатываете контракт с использованием Rust and ``concordium-std``, the
   процедурные макросы ``#[init(...)]`` and ``#[receive(...)]`` генерируют корректную схему именования.

.. _Web Assembly: https://webassembly.org/
