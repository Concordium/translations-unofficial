.. Should answer:
    - Что такое смарт-контракт
    - Для чего нужно использовать смарт-контракт
    - Для каких целей используются смарт-контракт
    - Для каких целей не используются смарт-контракт

===============================
Введение в смарт-контракты
===============================

Смарт-контракт – это заданный пользователем фрагмент кода, который передаётся в блокчейн Concordium и используется для определения поведения, не являющегося непосредственно частью основного протокола. Смарт-контракты выполняются узлами в сети Concordium в соответствии с предустановленными правилами. Их выполнение полностью прозрачно, и все узлы должны быть согласованы в отношении того, какие результаты выполнения основываются только на общедоступной информации.

Смарт-контракт может получать, хранить и отправлять GTU, он может наблюдать за некоторыми аспектами цепочки и поддерживать своё состояние. Смарт-контракты всегда выполняются как отклик на внешние действия, например, когда аккаунт посылает сообщение. На практике смарт-контракты часто представляют собой небольшие части более масштабных систем, совмещая on-chain и off-chain функциональность. Примером off-chain функциональности может служить сервер, который обращается к смарт-контракту, опирающемуся на данные внешнего мира, такие как цены на акции или информация о погоде.

Для каких целей служат смарт-контракты?
=======================================

Смарт-контракты могут понижать требуемый уровень доверия третьим сторонам, в некоторых случаях полностью исключая необходимость в доверенной третьей стороне, в других случаях ограничивая их возможности и таким образом понижая требуемый уровень доверия к ним.

Поскольку смарт-контракты выполняются абсолютно прозрачно, так, что любой человек, имеющий доступ к узлу, может это подтвердить, они могут быть весьма полезны для обеспечения согласованности между сторонами.

.. _auction:

Пример смарт-контракта для проведения торгов
--------------------------------------------

Вариантом использования для смарт-контрактов может служить проведение торгов. В этом случае мы программируем смарт-контракт, чтобы принимать различные ставки и следить за тем, кто предложит наивысшую цену. Когда торги заканчиваются, смарт-контракт посылает GTU-ставку победителя продавцу, а все остальные ставки возвращаются. В ответ продавец должен послать товар победителю торгов.

Смарт-контракт замещает главную роль аукциониста. Сам по себе контракт только управляет ставками и on-chain раздачей GTU. Cкорее всего потребуется какая-то схема выплаты компенсации участнику, предложившему наивысшую ставку, если продавец не выполнит своих обязательств. Наиболее вероятно это будет означать, что контракт должен обеспечить определённый принцип доказательства того, что продавец действительно выполнил свои обязательства, или определённый способ подать жалобу участником, предложившим наивысшую ставку. Смарт-контракты не могут решить эти практические вопросы автоматически, и лучшее решение скорее всего будет зависеть от специфики проведения торгов.

Для каких целей смарт-контракты *не* служат?
============================================

Смарт-контракты – это весьма интересная технология и люди всё ещё ищут новые способы получить выгоду от их применения. Однако, есть несколько ситуаций, когда смарт-контракты – не лучшее решение.

Одним из ключевых преимуществ смарт-контрактов является доверие при выполнении кода, и для достижения этого огромное количество узлов в сети блокчейн должны выполнять один и тот же код и обеспечивать согласованность результатов. Конечно, это очень затратно по сравнению с запуском того же самого кода на одном узле в каком-нибудь облачном сервисе.

В случаях, когда смарт-контракт основан на сложных вычислениях, можно было бы вынести эти вычисления из смарт-контракта и поручить смарт-контракту выполнение только некоторых самых важных частей вычисления с использованием криптографических методов, чтобы обеспечить корректное выполнение других частей.

И последнее, важно помнить, что смарт-контракты не имеют конфиденциальности и **всё**, к чему смарт-контракт имеет доступ, доступно также для всех остальных участников в сети Concordium, что объясняется сложностью обработки закрытых данных в смарт-контракте. В некоторых случаях может быть полезным использовать криптографические механизмы, чтобы не работать с данными напрямую, а вместо этого поручить смарт-контрактам работать со вторичными представлениями, такими как шифровки и обязательства, которые скрывают реальные данные.

Жизненный цикл смарт-контракта
==============================

Смарт-контракт сначала развёртывается в цепочке как часть :ref:`модуля контракта <contract-module>`.
Затем смарт-контракт может быть *инициализирован* для получения :ref:`экземпляра смарт-контракта <contract-instances>`.
И напоследок, экземпляр смарт-контракта может многократно обновляться в соответствии со своей логикой.
