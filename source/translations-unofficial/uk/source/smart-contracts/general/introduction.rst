.. Should answer:
    - What is a smart contract
    - Why use a smart contract
    - What are the use cases
    - What are not the use cases

.. _introduction:

===============================
Введення в смарт-контракти
===============================

Смарт-контракт - це призначений для користувача фрагмент коду, який надійшов у блокчейн Concordium, і який використовується для певної поведінки, яке не є безпосередньо частиною основного протоколу.
Смарт-контракти виконуються вузлами в мережі Concordium відповідно до встановлених правил.
Їх виконання повністю прозоро, і всі вузли повинні підтвердити результат виконання, який заснований на загальнодоступної інформації. 

Смарт-контракт може отримувати, зберігати і відправляти GTU, він може стежити за деякими аспектами мережі і підтримувати свій стан.
Смарт-контракти завжди виконуються у відповідь на **зовнішні** дії, наприклад, відправка повідомлення.
На практиці смарт-контракти часто являють собою невелику частину більшої системи, що поєднує в собі функціональність мережі і поза нею.
Прикладом функціональності поза мережею може бути сервер, який викликає смарт-контракт на основі даних з реального світу, таких як ціни на акції або інформація про погоду. 

Для чого потрібні смарт-контракти?
=============================

Смарт-контракти можуть знизити необхідний рівень довіри до третіх сторін. 
В одних випадках усуваючи необхідність у довіреній третій стороні, в інших випадках зменшуючи їх можливості і тим самим зменшуючи необхідний рівень довіри до них.

Оскільки смарт-контракти виконуються повністю прозоро, так що будь-яка людина, що має доступ до вузла, може перевірити це, тому вони можуть бути дуже корисні для забезпечення угоди між сторонами. 

.. _auction:

Приклад смарт-контракту для аукціону 
------------------------------

Прикладом використання смарт-контрактів може бути проведення аукціону; тут ми програмуємо смарт-контракт так, щоб він приймав будь-які пропозиції від будь-якого учасника і відстежував найкращого претендента.
Коли аукціон закінчується, смарт-контракт відправляє перемогла ставку GTU продавцеві, а всі інші ставки повертає назад.
Потім продавець повинен відправити товар переможцю.

Смарт-контракт замінює головну роль організатора аукціону.
Сам контракт регулює тільки частина торгів і розподіл GTU в мережі.
Ймовірно, також буде потрібно деяка логіка для відшкодування витрат того, хто запропонує найвищу ціну, якщо продавець не виконає свої зобов'язання.
Швидше за все, це буде означати, що контракт повинен містити якесь правило докази того, що продавець дійсно виконав своє зобов'язання, або якийсь спосіб для того, щоб учасник, який запропонував найвищу ціну, мав можливість подати скаргу.
Смарт-контракти не можуть вирішити ці реальні проблеми автоматично, і краще рішення, ймовірно, буде залежати від специфіки аукціону. 

Для чого смарт-контракти *не* призначені? 
===================================

Смарт-контракти - це дуже цікава технологія, і люди все ще знаходять нові способи їх застосування. 
Однак в деяких випадках смарт-контракти не є хорошим рішенням.

Одним з ключових переваг смарт-контрактів є довіра до виконання коду, і для цього велику кількість вузлів в блокчейн мережі повинно виконувати один і той же код і забезпечувати узгодження результату. 
Природно, це стає дорого в порівнянні з запуском того ж коду на одному вузлі в будь-якої хмарної службі.

У випадках, коли смарт-контракт залежить від важких обчислень, можна було б винести ці розрахунки з смарт-контракту і змусити смарт-контракт виконувати тільки деякі ключові частини обчислень, використовуючи криптографічні методи, щоб гарантувати правильне виконання інших частин.

Нарешті, важливо пам'ятати, що смарт-контракти не мають конфіденційності, і **все**, до чого у смарт-контракту є доступ, доступно всім іншим в мережі Concordium, а це означає, що важко обробляти конфіденційні дані в смарт-контракті.
У деяких випадках можна використовувати криптографічні засоби, щоб не працювати з даними безпосередньо, а змусити смарт-контракти працювати з похідними поняттями, такими як шифрування і зобов'язання, які приховують фактичні дані. 

Життєвий цикл смарт-контракту 
==============================

Смарт-контракт спочатку розгортається в мережі як частина :ref:`contract module <contract-module>`. Після цього смарт-контракт може бути *ініціалізований* для отримання :ref:`smart contract instance <contract-instances>`. Нарешті, екземпляр смарт-контракту може багаторазово оновлюватися у відповідності зі своєю власною логікою. 
