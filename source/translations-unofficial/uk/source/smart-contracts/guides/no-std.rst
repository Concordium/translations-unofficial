.. _no-std:

=================================
Збірка з використанням ``no_std``
=================================

У цьому керівництві показано, як включити ``no_std`` для вашого смарт-контракту rust, потенційно зменшивши розмір отриманого модуля Wasm на кілька кілобайт.

Підготовка
===========

Компіляція ``concordium-std`` без ``std`` вимагає використання набору rust інструментів nightly toolchain, який можна встановити за допомогою ``rustup``:

.. code-block:: console

   $rustup toolchain install nightly

Налаштування модуля для ``no_std``
==================================

Бібліотека ``concordium-std`` надає ``std``, який дозволяє використовувати стандартну бібліотеку rust.
Ця функція включена за замовчуванням.

Щоб відключити її, потрібно просто відключити функції за замовчуванням для ``concordium-std`` в залежностях вашого модуля.

.. code-block:: rust

   [dependencies]
   concordium-std = { version: "=0.2", default-features = false }

Щоб мати можливість перемикатися між std і без std, також додайте ``std`` в свій власний модуль, який включає функцію ``std`` в ``concordium-std``:

.. code-block:: rust

   [features]
   std = ["concordium-std/std"]

Це приклад налаштування смарт-контрактів, де ``std`` для кожного модуля смарт-контракту включений за замовчуванням.

Збірка модуля
=============

Щоб використовувати набір інструментів nightly toolchain, додайте ``+nightly`` відразу після ``cargo``:

.. code-block:: console

   $cargo +nightly concordium build

Якщо ви хочете відключити функції за замовчуванням вашого власного модуля смарт-контракту, ви можете передати додаткові аргументи для ``cargo``:

.. code-block:: console

   $cargo +nightly concordium build -- --no-default-features
